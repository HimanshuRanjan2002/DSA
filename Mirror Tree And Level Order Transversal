from collections import deque

# Define the TreeNode class
class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

# Function to insert a value into the BST
def insert_into_bst(root, value):
    if root is None:
        return TreeNode(value)
    if value < root.value:
        root.left = insert_into_bst(root.left, value)
    else:
        root.right = insert_into_bst(root.right, value)
    return root

# Function to create a mirror of the tree
def mirror_tree(root):
    if root is None:
        return None
    root.left, root.right = mirror_tree(root.right), mirror_tree(root.left)
    return root

# Function to perform level order traversal
def level_order_traversal(root):
    if root is None:
        return []
    result = []
    queue = deque([root])
    while queue:
        node = queue.popleft()
        result.append(node.value)
        if node.left:
            queue.append(node.left)
        if node.right:
            queue.append(node.right)
    return result

# Main function to construct BST, mirror it, and print level order traversal
def main():
    # Input: Unsorted array
    arr = list(map(int, input("Enter elements of the array: ").split()))
    
    # Construct BST
    root = None
    for value in arr:
        root = insert_into_bst(root, value)
    
    print("Level order traversal of original BST:")
    print(level_order_traversal(root))
    
    # Mirror the tree
    root = mirror_tree(root)
    
    print("Level order traversal of mirrored BST:")
    print(level_order_traversal(root))

if __name__ == "__main__":
    main()
